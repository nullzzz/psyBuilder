import os
import sys
import datetime

from PyQt5.QtCore import Qt, QSettings, QTimer, QPropertyAnimation
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QMainWindow, QAction, QApplication, QFileDialog, QMessageBox

from app.attributes.main import Attributes
from app.center.main import Center
from app.center.widget_tabs.events.cycle.main import Cycle
from app.center.widget_tabs.events.durationPage import DurationPage
from app.center.widget_tabs.timeline.main import Timeline
from app.deviceSelection.globalSelection.globalDevices import GlobalDevice
from app.deviceSelection.progressBar import LoadingTip
from app.func import Func
from app.info import Info
from app.output.main import Output
from app.properties.main import Properties
from app.structure.main import Structure
from .wait_dialog import WaitDialog

cIndents = 0
isPreLineSwitch = 0

def printWithAutoIdent(f, inputStr, *argins):
    global cIndents
    global isPreLineSwitch

    incrAfterStr = ('if', 'try', 'switch', 'for', 'while')
    decreAndIncrStr = ('else', 'elseif', 'otherwise', 'catch')

    #    print(inputStr.split(' ')[0])
    if inputStr.split(' ')[0] in incrAfterStr:
        print(f"{inputStr.split(' ')[0]},increase 1")
        tabStrs = '\t' * cIndents
        print(f"{tabStrs}{inputStr}".format(*argins), file=f)
        cIndents += 1

    elif inputStr.split(' ')[0] in decreAndIncrStr:
        print(f"{inputStr.split(' ')[0]}, -1 and +1")
        cIndents -= 1
        tabStrs = '\t' * cIndents
        print(f"{tabStrs}{inputStr}".format(*argins), file=f)
        cIndents += 1

    elif 'end' == inputStr.split(' ')[0]:
        cIndents -= 1
        tabStrs = '\t' * cIndents
        print(f"{tabStrs}{inputStr}".format(*argins), file=f)
    elif 'end%switch' == inputStr.split(' ')[0]:
        cIndents -= 2
        tabStrs = '\t' * cIndents
        print(f"{tabStrs}{inputStr}".format(*argins), file=f)

    elif 'case' == inputStr.split(' ')[0]:

        if 0 == isPreLineSwitch:
            print(f"{inputStr.split(' ')[0]}, -1")
            cIndents -= 1

        tabStrs = '\t' * cIndents
        print(f"{tabStrs}{inputStr}".format(*argins), file=f)
        cIndents += 1

    else:
        tabStrs = '\t' * cIndents
        print(f"{tabStrs}{inputStr}".format(*argins), file=f)

    if 'switch' == inputStr.split(' ')[0]:
        isPreLineSwitch = 1
    else:
        isPreLineSwitch = 0


def repTabStr(cIndents):
    return '\t' * cIndents

def compilePTB(globalSelf):
    if not Info.FILE_NAME:
        if not globalSelf.getFileName():
            QMessageBox.information(globalSelf, "Warning", "File must be saved before compiling.", QMessageBox.Ok)
            return

    # get save path
    compile_file_name = ".".join(Info.FILE_NAME.split('.')[:-1]) + ".m"
    # open file
    with open(compile_file_name, "w") as f:
        #  print function start info
        # import datetime
        # print(Info.TIMELINE)

        cFilenameOnly = os.path.split(compile_file_name)[1].split('.')[0]
        # the help info
        cIndents = 0

        print(f"{repTabStr(cIndents)}function {cFilenameOnly}()", file=f)
        print(f"{repTabStr(cIndents)}% function generated by PTB Builder 0.1", file=f)
        print(f"{repTabStr(cIndents)}% If you use PTB Builder for your research, then we would appreciate your citing our work in your paper:",file=f)
        print(f"{repTabStr(cIndents)}% , (2019) PTB builder: a free GUI to generate experimental codes for Psychoolbox. Behavior Research Methods\n%",file=f)
        print(f"{repTabStr(cIndents)}% To report possible bugs and any suggestions please send us e-mail:", file=f)
        print(f"{repTabStr(cIndents)}% Yang Zhang", file=f)
        print(f"{repTabStr(cIndents)}% Ph.D", file=f)
        print(f"{repTabStr(cIndents)}% Department of Psychology, \n% SooChow University", file=f)
        print(f"{repTabStr(cIndents)}% zhangyang873@gmail.com \n% Or yzhangpsy@suda.edu.cn", file=f)
        print(f"{repTabStr(cIndents)}% {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", file=f)
        # begin of the function
        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)
        print(f"{repTabStr(cIndents)}%      begin      ", file=f)
        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)
        
        #
        # get subject information
        print(f"{repTabStr(cIndents)}%----- get subject information -------/", file=f)
        print(f"{repTabStr(cIndents)}{cFilenameOnly} = OpenExp_BCL('{cFilenameOnly}',pwd);", file=f)
        print(f"{repTabStr(cIndents)}close(gcf);", file=f)
        print(f"{repTabStr(cIndents)}%-------------------------------------\\\n", file=f)

        # the function body try, catch end
        print(f"{repTabStr(cIndents)}try", file=f)

        cIndents += 1

        print(f"{repTabStr(cIndents)}KbName('UnifyKeyNames');\n", file=f)
        print(f"{repTabStr(cIndents)}abortKeyCode = KbName('ESCAPE');\n", file=f)

        print(f"{repTabStr(cIndents)}expStartTime = datestr(now,'dd-mmm-YYYY:HH:MM:SS'); % record start time \n", file=f)

        print(f"{repTabStr(cIndents)}%--------Reinitialize the global random seed ---------/", file=f)
        print(f"{repTabStr(cIndents)}cRandSeed = RandStream('mt19937ar','Seed','shuffle');", file=f)
        print(f"{repTabStr(cIndents)}RandStream.setGlobalStream(cRandSeed);", file=f)
        print(f"{repTabStr(cIndents)}%-----------------------------------------------------\\\n", file=f)
        print(f"{repTabStr(cIndents)}hideCursor;            % hide mouse cursor\n", file=f)


        print(f"{repTabStr(cIndents)}if isWin", file=f)
        cIndents += 1
        print(f"{repTabStr(cIndents)}ShowHideWinTaskbar(0); % hide the window taskbar\n", file=f)
        cIndents -= 1
        print(f"{repTabStr(cIndents)}end", file=f)


        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)
        print(f"{repTabStr(cIndents)}% define and initialize input/output devices", file=f)
        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)
        # get output devices, such as global output devices.
        # you can get each widget's device you selected
        output_devices = Info.OUTPUT_DEVICE_INFO
        input_devices  = Info.INPUT_DEVICE_INFO

        print(f"{repTabStr(cIndents)}%------ define input devices --------/", file=f)
        iKeyboard = 1
        iGamepad  = 1
        iRespBox  = 1
        iMouse    = 1

        for input_device in input_devices:
            print(input_device)
            if input_devices[input_device]['Device Type'] == 'keyboard':
                print(f"{repTabStr(cIndents)}KBoards({iKeyboard}).port     = '{input_devices[input_device]['Device Port']}';", file=f)
                print(f"{repTabStr(cIndents)}KBoards({iKeyboard}).name     = '{input_devices[input_device]['Device Name']}';\n",
                      file=f)
                iKeyboard += 1
            elif input_devices[input_device]['Device Type'] == 'mouse':
                iMouse += 1
            elif input_devices[input_device]['Device Type'] == 'game pad':
                iGamepad += 1
            elif input_devices[input_device]['Device Type'] == 'response box':
                iRespBox += 1

        # if u'\u4e00' <= char <= u'\u9fa5':  # 判断是否是汉字

        print(f"{repTabStr(cIndents)}%------------------------------------\\\n\n", file=f)

        print(f"{repTabStr(cIndents)}%----- define output devices --------/", file=f)

        iMonitor = 1
        iParal   = 1
        iNetPort = 1
        iSerial  = 1

        for output_device in output_devices:
            # print(output_device)
            # get output device index
            # output_device_index = output_device.split('.')[-1]

            if output_devices[output_device]['Device Type'] == 'screen':
                print(f"{repTabStr(cIndents)}monitors({iMonitor}).port       =  {output_devices[output_device]['Device Port']};", file=f)
                print(f"{repTabStr(cIndents)}monitors({iMonitor}).name       = '{output_devices[output_device]['Device Name']}';", file=f)
                print(f"{repTabStr(cIndents)}monitors({iMonitor}).bkColor    = '{output_devices[output_device]['Back Color']}';", file=f)
                print(f"{repTabStr(cIndents)}monitors({iMonitor}).muliSample =  {output_devices[output_device]['Multi Sample']};\n", file=f)
                iMonitor += 1

            elif output_devices[output_device]['Device Type'] == 'network_port':
                # try:
                #     Func.log(f"{output_devices[output_device]['Device Port']}")  # print info to the output panel
                #     cIpAddress, cPortValue = output_devices[output_device]['Device Port'].split(':')
                # except:
                #     QMessageBox.information(globalSelf, "Warning",  "Output device '{}''s IPPort '{}' should be in format:\n 'IPAdress:Port'".format(output_devices[output_device]['Device Name'],output_devices[output_device]['Device Port']),
                #                             QMessageBox.Ok)
                #     return

                print(f"{repTabStr(cIndents)}TCPIPs({iNetPort}).ipAdd    = '{output_devices[output_device]['Device Port']}';", file=f)
                print(f"{repTabStr(cIndents)}TCPIPs({iNetPort}).port     =  {output_devices[output_device]['IP Port']};", file=f)
                print(f"{repTabStr(cIndents)}TCPIPs({iNetPort}).name     = '{output_devices[output_device]['Device Name']}';", file=f)
                print(f"{repTabStr(cIndents)}TCPIPs({iNetPort}).isClient = {output_devices[output_device]['Is Client']};\n", file=f)
                # print(f"{repTabStr(cIndents)}TCPIPs({iNetPort}).type = '{output_devices[output_device]['Device Type']}';", file=f)
                # print(f"{repTabStr(cIndents)}TCPIPs({iNetPort}).index = '{output_device_index}';", file=f)
                iNetPort += 1

            elif output_devices[output_device]['Device Type'] == 'parallel_port':
                print(f"{repTabStr(cIndents)}parPort({iParal}).port     = hex2dec('{output_devices[output_device]['Device Port']}');", file=f)
                print(f"{repTabStr(cIndents)}parPort({iParal}).name     = '{output_devices[output_device]['Device Name']}';\n", file=f)
                # print(f"{repTabStr(cIndents)}parPort({iParal}).type = '{output_devices[output_device]['Device Type']}';", file=f)
                # print(f"{repTabStr(cIndents)}parPort({iParal}).index = '{output_device_index}';", file=f)
                iParal += 1

            elif output_devices[output_device]['Device Type'] == 'serial_port':
                print(f"{repTabStr(cIndents)}serPort({iSerial}).port     = '{output_devices[output_device]['Device Port']}';", file=f)
                print(f"{repTabStr(cIndents)}serPort({iSerial}).name     = '{output_devices[output_device]['Device Name']}';", file=f)
                print(f"{repTabStr(cIndents)}serPort({iSerial}).baudRate = '{output_devices[output_device]['Baud Rate']}';", file=f)
                print(f"{repTabStr(cIndents)}serPort({iSerial}).dataBits = '{output_devices[output_device]['Data Bits']}';\n", file=f)
                # print(f"{repTabStr(cIndents)}serPort({iSerial}).type = '{output_devices[output_device]['Device Type']}';", file=f)
                # print(f"{repTabStr(cIndents)}serPort({iSerial}).index = '{output_device_index}';", file=f)
                iSerial += 1

        print(f"{repTabStr(cIndents)}%------------------------------------\\\n", file=f)

        print(f"{repTabStr(cIndents)}%----- initalize output devices ---------/", file=f)
        print(f"\n{repTabStr(cIndents)}%--- open windows ---/", file=f)
        print(f"{repTabStr(cIndents)}winIds    = zeros({iMonitor-1},1);", file=f)
        print(f"{repTabStr(cIndents)}winIFIs   = zeros({iMonitor-1},1);", file=f)
        print(f"{repTabStr(cIndents)}fullRects = zeros({iMonitor-1},4);\n", file=f)

        print(f"{repTabStr(cIndents)}for iWin = 1:numel(monitors)", file=f)
        cIndents += 1
        print(f"{repTabStr(cIndents)}[winIds(iWin),fullRects(iWin,:)] = Screen('OpenWindow',monitors(iWin).port,monitors(iWin).bkColor,[],[],[],[],monitors(iWin).muliSample);", file=f)
        print(f"{repTabStr(cIndents)}Screen('BlendFunction', winIds(iWin),'GL_SRC_ALPHA','GL_ONE_MINUS_SRC_ALPHA'); % force to most common alpha-blending factors", file=f)
        print(f"{repTabStr(cIndents)}winIFIs(iWin) = Screen('GetFlipInterval',winIds(iWin));                        % get inter frame interval (i.e., 1/refresh rate)", file=f)
        cIndents -= 1
        print(f"{repTabStr(cIndents)}end % for iWin ", file=f)

        print(f"{repTabStr(cIndents)}%--------------------\\\n", file=f)

        # initialize TCPIP connections
        if iNetPort > 1:
            print(f"\n{repTabStr(cIndents)}%--- open TCPIPs ----/", file=f)
            print(f"{repTabStr(cIndents)}tcpipCons = zeros({iNetPort - 1},1);\n", file=f)

            print(f"{repTabStr(cIndents)}for iCount = 1:numel(TCPIPs)", file=f)

            cIndents += 1

            if output_devices[output_device]['Is Client'] == 1:
                print(f"{repTabStr(cIndents)}tcpipCons(iCount) = pnet('tcpconnect',TCPIPs(iCount).ipAdd,TCPIPs(iCount).port);", file=f)
            else:
                print(f"{repTabStr(cIndents)}tcpipCons(iCount) = pnet('tcpsocket',TCPIPs(iCount).port);", file=f)

            cIndents -= 1
            print(f"{repTabStr(cIndents)}end % iCount", file=f)

            print(f"{repTabStr(cIndents)}%----------------------\\\n", file=f)

        # initialize serial ports
        if iSerial > 1:
            print(f"\n{repTabStr(cIndents)}%--- open serial ports ----/", file=f)
            print(f"{repTabStr(cIndents)}serialCons = zeros({iSerial-1},1);\n", file=f)

            print(f"{repTabStr(cIndents)}for iCount = 1:numel(serialCons)", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}serialCons(iCount) = IOPort('OpenSerialPort',serPort(iCount).port,['BaudRate=',serPort(iCount).baudRate,',DataBits=',serPort(iCount).dataBits]);", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}end % iCount", file=f)
            print(f"{repTabStr(cIndents)}%--------------------------\\\n", file=f)
        # initialize parallel ports
        if iParal > 1:
            print(f"\n{repTabStr(cIndents)}%--- open parallel ports ----/", file=f)
            print(f"{repTabStr(cIndents)}% for linux we directly use outb under sodo mode ", file=f)
            print(f"{repTabStr(cIndents)}if IsWin", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}try", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}io64Obj = io64;", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}catch", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}error('Failed to find io64, please see \"http://apps.usd.edu/coglab/psyc770/IO64.html\" for instruction of installation!');", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}end % try\n", file=f)
            print(f"{repTabStr(cIndents)}if 0 ~= io64(ioObj)", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}error('inputout 64 installation failed!');", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}end % if 0 ~= \n", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}elseif IsOSX", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}error('curently, we did not support output via parallel under Mac OX!');", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}end % if IsWin", file=f)
            print(f"{repTabStr(cIndents)}%----------------------------\\\n", file=f)
        print(f"{repTabStr(cIndents)}%----------------------------------------\\\n", file=f)





        # get widgets in the main timeline
        cTimelineWidgetIds = Func.getWidgetIDInTimeline(f"{Info.TIMELINE}.0")

        for cWidgetId in cTimelineWidgetIds:
            cWidget = Info.WID_WIDGET[cWidgetId]
            print(Func.getWidgetName(cWidgetId))
            print(cWidget.widget_id)
            print(Func.getProperties(cWidgetId))
            print(cWidget.getPropertyByKey('Text'))
            # print(Func.getScreen)
            # print(dir(cWidget))

        """
            widget是具体的某个控件

            widget为Image时，Text\Video\Sound类似的
            filename: str = widget.getFilename()
            output_device: dict = widget.getOutputDevice()
            for device, properties in output_device.items():
                output_name: str = device
                value_or_msg: str = properties.get("Value or Msg", "")
                pulse_duration: str = properties.get("Pulse Duration", "")

            widget为If时
            condition: str = widget.getCondition()
            true_event: dict = widget.getTrueWidget() # false_event类似
            stim_type: str = true_event.get("stim type", "")
            event_name: str = true_event.get("event name", "")
            widget_id: str = true_event.get("widget id", "")
            widget: Widget = true_event.get("widget", None) # 这个widget就是Slider/Image/...具有若干上述getXXX方法

            widget为switch
            switch: str = widget.getSwitch()
            cases: list = widget.getCase()
            for case in cases:
                case: dict
                case_value: str = case.get("case value", "")
                stim_type: str = case.get("stim type", "")
                event_name: str = case.get("event name", "")
                widget_id: str = case.get("widget id", "")
                widget: Widget = case.get("widget", None)
            """





        print(f"{repTabStr(cIndents)}Priority(1);                % Turn the priority to high priority", file=f)


















        print(f"{repTabStr(cIndents)}expEndTime = datestr(now,'dd-mmm-YYYY:HH:MM:SS'); % record the end time \n", file=f)
        print(f"{repTabStr(cIndents)}sca;                        % Close opened windows", file=f)
        print(f"{repTabStr(cIndents)}ShowCursor;                 % Show the hided mouse cursor", file=f)
        print(f"{repTabStr(cIndents)}Priority(0);                % Turn the priority back to normal", file=f)
        print(f"{repTabStr(cIndents)}RestrictKeysForKbCheck([]); % Re-enable all keys\n", file=f)
        print(f"{repTabStr(cIndents)}if isWin", file=f)
        cIndents += 1
        print(f"{repTabStr(cIndents)}ShowHideWinTaskbar(1);      % show the window taskbar.", file=f)
        cIndents -= 1
        print(f"{repTabStr(cIndents)}end\n", file=f)
        print(f"{repTabStr(cIndents)}save({cFilenameOnly}.filename); % save the results\n", file=f)


        #  close opend devices
        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)
        print(f"{repTabStr(cIndents)}% close opened devices", file=f)
        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)
        # close TCPIP connections
        if iNetPort > 1:
            print(f"\n{repTabStr(cIndents)}%-- close serial ports --/", file=f)

            print(f"{repTabStr(cIndents)}for iCount = 1:numel(tcpipCons)", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}pnet(tcpipCons(iCount),'close');", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}end % iCount", file=f)

            print(f"{repTabStr(cIndents)}%------------------------\\\n", file=f)

        # close serial ports
        if iSerial > 1:
            print(f"\n{repTabStr(cIndents)}%--- close serial ports ---/", file=f)

            print(f"{repTabStr(cIndents)}for iCount = 1:numel(serialCons)", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}IOPort('Close',serialCons(iCount));", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}end % iCount", file=f)
            print(f"{repTabStr(cIndents)}%--------------------------\\\n", file=f)

        # close parallel ports
        if iParal > 1:
            print(f"\n{repTabStr(cIndents)}%--- close parallel ports ---/", file=f)
            print(f"{repTabStr(cIndents)}% Currently, Under windows io64 need to be closed", file=f)
            print(f"{repTabStr(cIndents)}% Under Linux, we will use outp (which will require running matlab under the sodo mode) to send trigger via parallel ", file=f)
            print(f"{repTabStr(cIndents)}if IsWin", file=f)
            cIndents += 1
            print(f"{repTabStr(cIndents)}clear io64;", file=f)
            cIndents -= 1
            print(f"{repTabStr(cIndents)}end % if IsWin", file=f)
            print(f"{repTabStr(cIndents)}% Under windows io64 need to be closed", file=f)
            print(f"{repTabStr(cIndents)}%----------------------------\\\n", file=f)







        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)
        print(f"{repTabStr(cIndents)}% end of the experiment", file=f)
        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n", file=f)
        cIndents -= 1
        print(f"{repTabStr(cIndents)}catch {cFilenameOnly}_error\n", file=f)
        cIndents += 1

        print(f"{repTabStr(cIndents)}sca;                        % Close opened windows", file=f)
        print(f"{repTabStr(cIndents)}ShowCursor;                 % Show the hided mouse cursor", file=f)
        print(f"{repTabStr(cIndents)}Priority(0);                % Turn the priority back to normal", file=f)
        print(f"{repTabStr(cIndents)}RestrictKeysForKbCheck([]); % Re-enable all keys\n", file=f)
        print(f"{repTabStr(cIndents)}if isWin", file=f)
        cIndents += 1
        print(f"{repTabStr(cIndents)}ShowHideWinTaskbar(1);      % show the window taskbar", file=f)
        cIndents -= 1
        print(f"{repTabStr(cIndents)}end\n", file=f)
        print(f"{repTabStr(cIndents)}save('{cFilenameOnly}_debug');", file=f)
        print(f"{repTabStr(cIndents)}rethrow({cFilenameOnly}_error);", file=f)

        cIndents -= 1
        print(f"{repTabStr(cIndents)}end % try\n", file=f)

        cIndents -= 1
        print(f"{repTabStr(cIndents)}end % function \n\n\n\n\n\n\n", file=f)

        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)
        print(f"{repTabStr(cIndents)}% subfun 1: detectAbortKey", file=f)
        print(f"{repTabStr(cIndents)}%%%%%%%%%%%%%%%%%%%%%%%%%%%%", file=f)

        print(f"{repTabStr(cIndents)}function detectAbortKey_bcl(abortKeyCode)\n", file=f)
        cIndents += 1
        print(f"{repTabStr(cIndents)}[keyIsDown, Noused, keyCode] = responseCheck(-1);", file=f)
        print(f"{repTabStr(cIndents)}if keyCode(abortKeyCode)", file=f)
        cIndents += 1
        print(f"{repTabStr(cIndents)}error('The experiment was aborted by the experimenter!');", file=f)
        cIndents -= 1
        print(f"{repTabStr(cIndents)}end", file=f)
        cIndents -= 1
        print(f"{repTabStr(cIndents)}end\n", file=f)



    Func.log(f"Compile successful!\n{compile_file_name}") # print info to the output panel
    # except Exception as e:
    #     print(f"{repTabStr(cIndents)}compile error {e}")

